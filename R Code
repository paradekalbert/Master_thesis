### This is R code for my master thesis 
### Main functions are CTC and bootstrap_CTC. 
### Read READme.txt file for further information




################## Preliminary functions###########################################################################

differentiate <- function(a){
  b=a[2:nrow(a),]
  for (i in 1:(nrow(a)-1)) {
    for (j in 1:ncol(a)) {
      b[i,j]=a[i+1,j]-a[i,j]
    }}
  return(b)
}

run_future_max <- function(x, k=3, instant=TRUE){
  if (instant==TRUE) {q=0}else{q=1}
  
  n=length(x);  y=c()  
  for (i in 1:n) {y=rbind(y, max(x[(min(n,i+q)):(min(n,i+k-1))]))}
  
  return(y)
}


transform_series<-function(x, move=TRUE){
  
  if(move){
    x[,1]=x[,1]-median(x[,1]) 
    x[,2]=x[,2]-median(x[,2]) 
  }
  
  x[,1]=abs(x[,1])
  x[,2]=abs(x[,2])
  
  return(x)
}

switcher_for_bootstrap <- function(x, number_of_blocks=15){
  
  n=nrow(x)
  m=n%/%number_of_blocks
  
  y=c()
  for (i in 1:number_of_blocks) {#
    kocka=sample(1:(n-m), 1)
    for (j in 1:m) {
      y=rbind(y,x[kocka+j,])  
    }
    
  }
  if (ncol(x)==1) {  
    if(n%%number_of_blocks!=0){y=c(y,x[((number_of_blocks*m+1):n),])}}
  else{
    if(n%%number_of_blocks!=0){
      k=n-number_of_blocks*m
      kocka=sample(1:(n-k), 1)
      
      for (j in 1:k) {
        y=rbind(y,x[kocka+j,])  
      }}
  }
  return(data.frame(y))
}


#########################causal tail coefficient for time series###############################################################
CTC<- function(x, lag=3, v=0.5, both_ways=FALSE, derivative=FALSE){
  n=nrow(x)
  k=floor(n^{v})
  
  CTC_one <- function(x){
    kolkatevporadi <- function(dataset, cislo){return((length(dataset)*(ecdf(dataset)(cislo))))}
    
    
    sort_x=data.frame(cbind(sort(x[,1]), sort(x[,2])))
    y=run_future_max(x[,2], lag+1, instant = FALSE)
    
    
    C=0; pocet=0
    for (i in seq(1, nrow(x), 1)) {
      if (x[i,1]>=sort_x[(n-k+1),1]) {
        C=C+(kolkatevporadi(sort_x[,2], y[i])/n)
        pocet=pocet+1
      }}
    
    return(C/pocet)
  }
  
  
  CTC_two<- function(x){
    y=data.frame(x[,2], x[,1])
    return(CTC_one(y))}
  
  
  if (derivative==TRUE) {x=differentiate(x)}
  if (both_ways==TRUE) {x=transform_series(x, TRUE)}
  
  
  result=data.frame(rbind(CTC_one(x), CTC_two(x)))
  colnames(result)<-c("CTC")
  rownames(result)<-c("X-->Y ", "Y-->X ")
  
  
  return(result)
}



##############################BOOTSTRAP##########################################################################################################



bootstrap_step<-function(x, number_of_blocks=15, number_of_resampling=200, lag=3,  v=0.5){
  
  C=CTC(x, lag,  v)
  list=c(0,0)
  
  for (i in 1:number_of_resampling) {
    y=switcher_for_bootstrap(x, number_of_blocks)
    list=cbind(list, 2*C- CTC(y, lag,  v))
  }
  return(list[,-1])
}

CTC_bootstrap<-function(x, number_of_blocks=15, number_of_resampling=200, lag=3,  v=0.5){
  
  C=CTC(x, lag, v)
  list= bootstrap_step(x, number_of_blocks, number_of_resampling, lag,  v)
  
  
  x=list[1,]
  p_value_x=length(x[x >=1])/length(x)
  first=c(C[1,], as.numeric((quantile(x, 0.05))), as.numeric(quantile(x,0.95)), p_value_x)
  y=list[2,]
  p_value_y=length(y[y >=1])/length(y)
  second=c(C[2,], as.numeric((quantile(y, 0.05))), as.numeric(quantile(y,0.95)), p_value_y)
  
  result=data.frame(rbind(first, second))
  colnames(result)<-c("CTC", "5%", "95%", "p-value")
  rownames(result)<-c("X-->Y", "Y-->X")
  return(result)
}
